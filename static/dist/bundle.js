/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/dashboard.js":
/*!********************************!*\
  !*** ./static/js/dashboard.js ***!
  \********************************/
/***/ (() => {

eval("const API_BASE_URL = '/api';\nlet chart; // Global variable to store the chart instance\nlet sessionId; // Global variable to store the session ID\nlet globalEconomicData; // Global variable to store economic data\nlet globalHistoricalData;\nlet globalPredictions;\n\n// Function to generate a new session ID\nfunction generateSessionId() {\n    return Date.now().toString();\n}\n\n// Function to update the chart\nfunction updateChart(historicalData, predictions, forecastDays, historicalDays) {\n    const ctx = document.getElementById('usd-idr-chart').getContext('2d');\n    \n    if (!historicalData || historicalData.length === 0 || !predictions || predictions.length === 0) {\n        console.log(\"No data available for chart\");\n        ctx.font = '20px Arial';\n        ctx.fillStyle = 'gray';\n        ctx.textAlign = 'center';\n        ctx.fillText('No data available', ctx.canvas.width / 2, ctx.canvas.height / 2);\n        return;\n    }\n\n    const filteredHistoricalData = historicalData.slice(-historicalDays);\n    const filteredPredictions = predictions.slice(0, forecastDays);\n\n    const historicalDates = filteredHistoricalData.map(d => new Date(d.Date));\n    const futureDates = filteredPredictions.map((_, index) => {\n        const lastDate = new Date(filteredHistoricalData[filteredHistoricalData.length - 1].Date);\n        return new Date(lastDate.setDate(lastDate.getDate() + index + 1));\n    });\n    \n    const labels = [...historicalDates, ...futureDates];\n    const historicalValues = filteredHistoricalData.map(d => d.Close);\n    const predictionValues = filteredPredictions.map(d => d.predicted_usdidr);\n\n    if (chart) {\n        chart.destroy();\n    }\n\n    chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: labels,\n            datasets: [{\n                label: 'Historical USD/IDR',\n                data: [...historicalValues, ...Array(filteredPredictions.length).fill(null)],\n                borderColor: 'rgb(75, 192, 192)',\n                tension: 0.1,\n                pointRadius: 2,\n            }, {\n                label: 'Predicted USD/IDR',\n                data: [...Array(filteredHistoricalData.length).fill(null), ...predictionValues],\n                borderColor: 'rgb(255, 99, 132)',\n                borderDash: [5, 5],\n                tension: 0.1,\n                pointRadius: 2,\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            interaction: {\n                mode: 'index',\n                intersect: false,\n            },\n            scales: {\n                x: {\n                    type: 'time',\n                    time: {\n                        unit: 'day',\n                        displayFormats: {\n                            day: 'MMM d'\n                        }\n                    },\n                    title: {\n                        display: true,\n                        text: 'Date'\n                    },\n                    ticks: {\n                        maxTicksLimit: 10\n                    }\n                },\n                y: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'USD/IDR Exchange Rate'\n                    },\n                    suggestedMin: Math.min(...historicalValues, ...predictionValues) * 0.99,\n                    suggestedMax: Math.max(...historicalValues, ...predictionValues) * 1.01\n                }\n            },\n            plugins: {\n                tooltip: {\n                    mode: 'index',\n                    intersect: false\n                },\n                legend: {\n                    position: 'top',\n                },\n                zoom: {\n                    pan: {\n                        enabled: true,\n                        mode: 'x',\n                    },\n                    zoom: {\n                        wheel: {\n                            enabled: true,\n                        },\n                        pinch: {\n                            enabled: true\n                        },\n                        mode: 'x',\n                    }\n                }\n            }\n        }\n    });\n}\n\n// Function to show loading popup\nfunction showLoadingPopup() {\n    document.getElementById('loading-popup').style.display = 'flex';\n}\n\n// Function to hide loading popup\nfunction hideLoadingPopup() {\n    document.getElementById('loading-popup').style.display = 'none';\n}\n\n// Function to fetch all data\nasync function fetchAllData() {\n    showLoadingPopup();\n    try {\n        const [economicData, newsData] = await Promise.all([\n            fetchEconomicIndicators(),\n            fetchNews()\n        ]);\n        globalEconomicData = economicData; // Store economic data globally\n        hideLoadingPopup();\n        return { economicData, newsData };\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        hideLoadingPopup();\n        throw error;\n    }\n}\n\n// Fetch economic indicators and update the UI\nasync function fetchEconomicIndicators(forecastDays = 14) {\n    console.log(\"Fetching economic indicators\");\n    try {\n        const response = await fetch(`${API_BASE_URL}/data?forecast_days=${forecastDays}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Economic data received:\", data);\n\n        globalEconomicData = data;\n        globalHistoricalData = data.usdidr_history;\n        globalPredictions = data.usdidr_predictions;\n\n        updateEconomicIndicators(data);\n        updateChart(data.usdidr_history, data.usdidr_predictions, forecastDays, 30);\n        updateAIInsight(data);\n        return data;\n    } catch (error) {\n        console.error('Error fetching economic indicators:', error);\n        document.getElementById('economic-indicators').innerHTML = `<p class=\"text-red-500\">Error loading economic indicators: ${error.message}. Please try again later.</p>`;\n        throw error;\n    }\n}\n\nfunction updateAIInsight(data) {\n    const aiInsightContent = document.getElementById('ai-insight-content');\n    const rawContent = data.ai_insight;\n\n    let parsedContent = rawContent;\n\n    // Check if marked is available and use it to parse Markdown\n    if (typeof marked !== 'undefined') {\n        parsedContent = marked.parse(rawContent);\n    }\n\n    aiInsightContent.innerHTML = `<div class=\"markdown-content\">${parsedContent}</div>`;\n}\n\n// Fetch latest news and update the UI\nasync function fetchNews() {\n    console.log(\"Fetching news\");\n    try {\n        const response = await fetch(`${API_BASE_URL}/news`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"News data received:\", data);\n        updateNews(data);\n        return data;\n    } catch (error) {\n        console.error('Error fetching news:', error);\n        const newsContainer = document.getElementById('news-items');\n        newsContainer.innerHTML = `<p class=\"text-red-500\">Error loading news: ${error.message}. Please try again later.</p>`;\n        throw error;\n    }\n}\n\n// Update economic indicators\nfunction updateEconomicIndicators(data) {\n    const indicatorsContainer = document.getElementById('economic-indicators');\n    indicatorsContainer.innerHTML = ''; // Clear existing content\n\n    const indicators = [\n        { title: 'USD/IDR', value: data.current_usdidr != null ? data.current_usdidr.toFixed(2) : 'N/A', trend: data.usdidr_trend },\n        { title: 'Inflation US', value: data.inflation_us != null ? data.inflation_us.toFixed(2) + '%' : 'N/A', trend: data.inflation_us_trend },\n        { title: 'Inflation ID', value: data.inflation_id != null ? data.inflation_id.toFixed(2) + '%' : 'N/A', trend: data.inflation_id_trend },\n        { title: 'BI Rate', value: data.bi_rate != null ? data.bi_rate.toFixed(2) + '%' : 'N/A', trend: data.bi_rate_trend },\n        { title: 'Fed Rate', value: data.fed_rate != null ? data.fed_rate.toFixed(2) + '%' : 'N/A', trend: data.fed_rate_trend },\n        { title: 'JKSE', value: data.jkse != null ? data.jkse.toFixed(2) : 'N/A', trend: data.jkse_trend },\n        { title: 'S&P 500', value: data.sp500 != null ? data.sp500.toFixed(2) : 'N/A', trend: data.sp500_trend }\n    ];\n\n    indicators.forEach(indicator => {\n        const indicatorHtml = `\n            <div class=\"bg-white p-4 rounded-lg shadow\">\n                <div class=\"flex justify-between items-center mb-2\">\n                    <h3 class=\"text-sm font-medium\">${indicator.title}</h3>\n                    <svg class=\"w-4 h-4 ${indicator.trend === 'up' ? 'text-green-500' : indicator.trend === 'down' ? 'text-red-500' : 'text-gray-500'}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"${indicator.trend === 'up' ? 'M5 10l7-7m0 0l7 7m-7-7v18' : indicator.trend === 'down' ? 'M19 14l-7 7m0 0l-7-7m7 7V3' : 'M5 12h14'}\"></path>\n                    </svg>\n                </div>\n                <div class=\"text-2xl font-bold\">${indicator.value}</div>\n            </div>`;\n        indicatorsContainer.insertAdjacentHTML('beforeend', indicatorHtml);\n    });\n}\n\n// Update news\nfunction updateNews(data) {\n    const newsContainer = document.getElementById('news-items');\n    newsContainer.innerHTML = ''; // Clear existing content\n\n    if (data.news && Array.isArray(data.news) && data.news.length > 0) {\n        // Display only the first 10 news items\n        data.news.slice(0, 10).forEach(item => {\n            const newsHtml = `\n                <div class=\"w-[300px] flex-shrink-0 bg-gray-50 p-4 rounded-lg\">\n                    <a href=\"${item.link || '#'}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"block\">\n                        <img src=\"${item.image || '/static/images/placeholder-image.jpg'}\" alt=\"${item.headline}\" class=\"w-full h-40 object-cover mb-2 rounded\">\n                        <h3 class=\"text-sm font-semibold mb-2 hover:text-blue-600\">${item.headline || 'No headline'}</h3>\n                        <p class=\"text-xs text-gray-500 mb-2\">${item.summary || 'No summary available'}</p>\n                        <p class=\"text-xs text-gray-400\">${item.source || 'Unknown source'} - ${item.date ? new Date(item.date).toLocaleDateString() : 'No date'}</p>\n                    </a>\n                </div>`;\n            newsContainer.insertAdjacentHTML('beforeend', newsHtml);\n        });\n    } else {\n        newsContainer.innerHTML = '<p class=\"text-red-500\">No news available at the moment.</p>';\n    }\n}\n\nfunction renderMarkdown(text) {\n    // Hapus indentasi di awal pesan dan trim whitespace\n    text = text.trim();\n    \n    // Ganti ## dengan h2 tag\n    text = text.replace(/^##\\s(.+)$/gm, '<h2 class=\"text-xl font-bold my-2\">$1</h2>');\n    \n    // Ganti # dengan h1 tag\n    text = text.replace(/^#\\s(.+)$/gm, '<h1 class=\"text-2xl font-bold my-3\">$1</h1>');\n    \n    // Ganti ** ** dengan strong tag\n    text = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n    \n    // Ganti * * dengan em tag\n    text = text.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n    \n    // Ganti newline dengan <br> tag\n    text = text.replace(/\\n/g, '<br>');\n    \n    // Ganti - dengan list item\n    text = text.replace(/^-\\s(.+)$/gm, '<li>$1</li>');\n    \n    // Wrap list items dengan ul tag\n    text = text.replace(/<li>(.|\\n)*?(<\\/li>)/g, '<ul class=\"list-disc list-inside my-2\">$&</ul>');\n    \n    return text;\n}\n\nfunction showChatLoading() {\n    document.getElementById('chat-loading').style.display = 'block';\n}\n\nfunction hideChatLoading() {\n    document.getElementById('chat-loading').style.display = 'none';\n}\n\nfunction sendAIQuestion() {\n    const questionInput = document.getElementById('ai-question');\n    const question = questionInput.value;\n\n    if (!question.trim()) return; // Jangan kirim jika pertanyaan kosong\n\n    showChatLoading(); // Tampilkan loading di dalam card chat\n    fetch(`${API_BASE_URL}/ai-recommendation`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n            question: question, \n            session_id: sessionId,\n            economic_data: globalEconomicData // Send stored economic data\n        })\n    })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            const chatHistory = document.getElementById('chat-history');\n            \n            if (data.chat_history && Array.isArray(data.chat_history)) {\n                // Hanya tambahkan pesan baru, bukan mengganti seluruh riwayat\n                const newMessages = data.chat_history.slice(-2); // Ambil 2 pesan terakhir (pertanyaan user dan jawaban AI)\n                newMessages.forEach(message => {\n                    const messageHtml = `\n                        <div class=\"chat-message ${message.role === 'user' ? 'user-message' : 'assistant-message'}\">\n                            ${renderMarkdown(message.content)}\n                        </div>`;\n                    chatHistory.insertAdjacentHTML('beforeend', messageHtml);\n                });\n\n                // Scroll to the bottom of the chat history\n                chatHistory.scrollTop = chatHistory.scrollHeight;\n            } else {\n                chatHistory.innerHTML += '<p class=\"text-red-500\">Error: Invalid response from AI service.</p>';\n            }\n\n            // Clear the input field after sending the question\n            questionInput.value = '';\n            hideChatLoading(); // Sembunyikan loading\n        })\n        .catch(error => {\n            console.error('Error sending AI question:', error);\n            const chatHistory = document.getElementById('chat-history');\n            chatHistory.innerHTML += `<p class=\"text-red-500\">Error sending AI question: ${error.message}</p>`;\n            hideChatLoading(); // Sembunyikan loading bahkan jika terjadi error\n        });\n}\n\n// Function to display AI welcome message\nfunction displayWelcomeMessage() {\n    const chatHistory = document.getElementById('chat-history');\n    const welcomeMessage = `\n        <div class=\"chat-message assistant-message\">\n            Selamat datang di AI Trading Assistant! Saya siap membantu Anda dengan analisis dan rekomendasi trading forex USD/IDR. Silakan ajukan pertanyaan atau minta saran tentang kondisi pasar saat ini.\n        </div>`;\n    chatHistory.innerHTML = welcomeMessage;\n}\n\nfunction toggleDarkMode() {\n    document.body.classList.toggle('dark-mode');\n    // Perbarui chart jika perlu\n    if (chart) {\n        chart.update();\n    }\n}\n\n// Event listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Generate a new session ID when the page loads\n    sessionId = generateSessionId();\n    console.log(\"New session ID:\", sessionId);\n\n    // Display welcome message\n    displayWelcomeMessage();\n\n    document.getElementById('send-question').addEventListener('click', sendAIQuestion);\n\n    document.getElementById('ai-question').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') {\n            sendAIQuestion();\n        }\n    });\n\n    const historicalDaysSelect = document.getElementById('historical-days');\n    const forecastDaysSelect = document.getElementById('forecast-days');\n\n    historicalDaysSelect.addEventListener('change', (event) => {\n        const historicalDays = parseInt(event.target.value);\n        updateChart(globalHistoricalData, globalPredictions, parseInt(forecastDaysSelect.value), historicalDays);\n    });\n\n    forecastDaysSelect.addEventListener('change', (event) => {\n        const forecastDays = parseInt(event.target.value);\n        fetchEconomicIndicators(forecastDays);\n    });\n\n    // Initial load\n    console.log(\"Initial load starting\");\n    fetchAllData()\n        .catch(error => {\n            console.error('Error during initial load:', error);\n        });\n\n    const darkModeToggle = document.getElementById('dark-mode-toggle');\n    if (darkModeToggle) {\n        darkModeToggle.addEventListener('click', toggleDarkMode);\n    }\n    \n    // Tambahkan event listener untuk responsivitas\n    window.addEventListener('resize', () => {\n        if (chart) {\n            chart.resize();\n        }\n    });\n});\n\n\n//# sourceURL=webpack:///./static/js/dashboard.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/dashboard.js"]();
/******/ 	
/******/ })()
;